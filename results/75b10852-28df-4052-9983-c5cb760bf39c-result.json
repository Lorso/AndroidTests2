{"name": "test_bus207", "status": "broken", "statusDetails": {"message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionAbortedError(10053, 'Программа на вашем хост-компьютере разорвала установленное подключение', None, 10053, None))", "trace": "self = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001C09AEE3A20>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nbody = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nheaders = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo',...0645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5', fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n>               chunked=chunked,\n            )\n\nvenv\\lib\\site-packages\\urllib3\\connectionpool.py:710: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001C09AEE3A20>\nconn = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\ntimeout = Timeout(connect=None, read=None, total=None), chunked = False\nhttplib_request_kw = {'body': b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus2...alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}}\ntimeout_obj = Timeout(connect=None, read=None, total=None)\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n>               conn.request(method, url, **httplib_request_kw)\n\nvenv\\lib\\site-packages\\urllib3\\connectionpool.py:398: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nbody = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nheaders = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}\n\n    def request(self, method, url, body=None, headers=None):\n        if headers is None:\n            headers = {}\n        else:\n            # Avoid modifying the headers passed into .request()\n            headers = headers.copy()\n        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):\n            headers[\"User-Agent\"] = _get_default_user_agent()\n>       super(HTTPConnection, self).request(method, url, body=body, headers=headers)\n\nvenv\\lib\\site-packages\\urllib3\\connection.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nbody = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nheaders = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}\n\n    def request(self, method, url, body=None, headers={}, *,\n                encode_chunked=False):\n        \"\"\"Send a complete request to the server.\"\"\"\n>       self._send_request(method, url, body, headers, encode_chunked)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:1229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nbody = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nheaders = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}\nencode_chunked = False\n\n    def _send_request(self, method, url, body, headers, encode_chunked):\n        # Honor explicitly requested Host: and Accept-Encoding: headers.\n        header_names = frozenset(k.lower() for k in headers)\n        skips = {}\n        if 'host' in header_names:\n            skips['skip_host'] = 1\n        if 'accept-encoding' in header_names:\n            skips['skip_accept_encoding'] = 1\n    \n        self.putrequest(method, url, **skips)\n    \n        # chunked encoding will happen if HTTP/1.1 is used and either\n        # the caller passes encode_chunked=True or the following\n        # conditions hold:\n        # 1. content-length has not been explicitly set\n        # 2. the body is a file or iterable, but not a str or bytes-like\n        # 3. Transfer-Encoding has NOT been explicitly set by the caller\n    \n        if 'content-length' not in header_names:\n            # only chunk body if not explicitly set for backwards\n            # compatibility, assuming the client code is already handling the\n            # chunking\n            if 'transfer-encoding' not in header_names:\n                # if content-length cannot be automatically determined, fall\n                # back to chunked encoding\n                encode_chunked = False\n                content_length = self._get_content_length(body, method)\n                if content_length is None:\n                    if body is not None:\n                        if self.debuglevel > 0:\n                            print('Unable to determine size of %r' % body)\n                        encode_chunked = True\n                        self.putheader('Transfer-Encoding', 'chunked')\n                else:\n                    self.putheader('Content-Length', str(content_length))\n        else:\n            encode_chunked = False\n    \n        for hdr, value in headers.items():\n            self.putheader(hdr, value)\n        if isinstance(body, str):\n            # RFC 2616 Section 3.7.1 says that text default has a\n            # default charset of iso-8859-1.\n            body = _encode(body, 'body')\n>       self.endheaders(body, encode_chunked=encode_chunked)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:1275: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmessage_body = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:1224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmessage_body = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n        self.send(msg)\n    \n        if message_body is not None:\n    \n            # create a consistent interface to message_body\n            if hasattr(message_body, 'read'):\n                # Let file-like take precedence over byte-like.  This\n                # is needed to allow the current position of mmap'ed\n                # files to be taken into account.\n                chunks = self._read_readable(message_body)\n            else:\n                try:\n                    # this is solely to check to see if message_body\n                    # implements the buffer API.  it /would/ be easier\n                    # to capture if PyObject_CheckBuffer was exposed\n                    # to Python.\n                    memoryview(message_body)\n                except TypeError:\n                    try:\n                        chunks = iter(message_body)\n                    except TypeError:\n                        raise TypeError(\"message_body should be a bytes-like \"\n                                        \"object or an iterable, got %r\"\n                                        % type(message_body))\n                else:\n                    # the object implements the buffer interface and\n                    # can be passed directly into socket methods\n                    chunks = (message_body,)\n    \n            for chunk in chunks:\n                if not chunk:\n                    if self.debuglevel > 0:\n                        print('Zero length chunk ignored')\n                    continue\n    \n                if encode_chunked and self._http_vsn == 11:\n                    # chunked encoding\n                    chunk = f'{len(chunk):X}\\r\\n'.encode('ascii') + chunk \\\n                        + b'\\r\\n'\n>               self.send(chunk)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:1055: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\ndata = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n                self.connect()\n            else:\n                raise NotConnected()\n    \n        if self.debuglevel > 0:\n            print(\"send:\", repr(data))\n        if hasattr(data, \"read\") :\n            if self.debuglevel > 0:\n                print(\"sendIng a read()able\")\n            encode = self._is_textIO(data)\n            if encode and self.debuglevel > 0:\n                print(\"encoding file using iso-8859-1\")\n            while 1:\n                datablock = data.read(self.blocksize)\n                if not datablock:\n                    break\n                if encode:\n                    datablock = datablock.encode(\"iso-8859-1\")\n                self.sock.sendall(datablock)\n            return\n        try:\n>           self.sock.sendall(data)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:977: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET6, type=SocketKind.SOCK_STREAM, proto=0>\ndata = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nflags = 0\n\n    def sendall(self, data, flags=0):\n        self._checkClosed()\n        if self._sslobj is not None:\n            if flags != 0:\n                raise ValueError(\n                    \"non-zero flags not allowed in calls to sendall() on %s\" %\n                    self.__class__)\n            count = 0\n            with memoryview(data) as view, view.cast(\"B\") as byte_view:\n                amount = len(byte_view)\n                while count < amount:\n>                   v = self.send(byte_view[count:])\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\ssl.py:1015: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET6, type=SocketKind.SOCK_STREAM, proto=0>\ndata = <memory at 0x000001C09AD5FF48>, flags = 0\n\n    def send(self, data, flags=0):\n        self._checkClosed()\n        if self._sslobj is not None:\n            if flags != 0:\n                raise ValueError(\n                    \"non-zero flags not allowed in calls to send() on %s\" %\n                    self.__class__)\n>           return self._sslobj.write(data)\nE           ConnectionAbortedError: [WinError 10053] Программа на вашем хост-компьютере разорвала установленное подключение\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\ssl.py:984: ConnectionAbortedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <requests.adapters.HTTPAdapter object at 0x000001C09AEE3B00>\nrequest = <PreparedRequest [POST]>, stream = False\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\ncert = None, proxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n>                   timeout=timeout\n                )\n\nvenv\\lib\\site-packages\\requests\\adapters.py:450: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001C09AEE3A20>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nbody = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nheaders = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo',...0645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5', fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Pass method to Response for length checking\n            response_kw[\"request_method\"] = method\n    \n            # Import httplib's response into our own wrapper object\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=response_conn,\n                retries=retries,\n                **response_kw\n            )\n    \n            # Everything went great!\n            clean_exit = True\n    \n        except EmptyPoolError:\n            # Didn't get a connection from the pool, no need to clean up\n            clean_exit = True\n            release_this_conn = False\n            raise\n    \n        except (\n            TimeoutError,\n            HTTPException,\n            SocketError,\n            ProtocolError,\n            BaseSSLError,\n            SSLError,\n            CertificateError,\n        ) as e:\n            # Discard the connection for these exceptions. It will be\n            # replaced during the next _get_conn() call.\n            clean_exit = False\n    \n            def _is_ssl_error_message_from_http_proxy(ssl_error):\n                # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n                # SSLErrors are kinda all over the place when it comes to the message,\n                # so we try to cover our bases here!\n                message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n                return (\n                    \"wrong version number\" in message or \"unknown protocol\" in message\n                )\n    \n            # Try to detect a common user error with proxies which is to\n            # set an HTTP proxy to be HTTPS when it should be 'http://'\n            # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n            # Instead we add a nice error message and point to a URL.\n            if (\n                isinstance(e, BaseSSLError)\n                and self.proxy\n                and _is_ssl_error_message_from_http_proxy(e)\n            ):\n                e = ProxyError(\n                    \"Your proxy appears to only use HTTP and not HTTPS, \"\n                    \"try changing your proxy URL to be HTTP. See: \"\n                    \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n                    \"#https-proxy-error-http-proxy\",\n                    SSLError(e),\n                )\n            elif isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError(\"Cannot connect to proxy.\", e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError(\"Connection aborted.\", e)\n    \n            retries = retries.increment(\n>               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n            )\n\nvenv\\lib\\site-packages\\urllib3\\connectionpool.py:786: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nresponse = None\nerror = ProtocolError('Connection aborted.', ConnectionAbortedError(10053, 'Программа на вашем хост-компьютере разорвала установленное подключение', None, 10053, None))\n_pool = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001C09AEE3A20>\n_stacktrace = <traceback object at 0x000001C09ADAD248>\n\n    def increment(\n        self,\n        method=None,\n        url=None,\n        response=None,\n        error=None,\n        _pool=None,\n        _stacktrace=None,\n    ):\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.HTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n>               raise six.reraise(type(error), error, _stacktrace)\n\nvenv\\lib\\site-packages\\urllib3\\util\\retry.py:550: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n\n    def reraise(tp, value, tb=None):\n        try:\n            if value is None:\n                value = tp()\n            if value.__traceback__ is not tb:\n>               raise value.with_traceback(tb)\n\nvenv\\lib\\site-packages\\urllib3\\packages\\six.py:769: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001C09AEE3A20>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nbody = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nheaders = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}\nretries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\nrelease_conn = False, chunked = False, body_pos = None\nresponse_kw = {'decode_content': False, 'preload_content': False}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo',...0645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5', fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n>               chunked=chunked,\n            )\n\nvenv\\lib\\site-packages\\urllib3\\connectionpool.py:710: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPSConnectionPool object at 0x000001C09AEE3A20>\nconn = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\ntimeout = Timeout(connect=None, read=None, total=None), chunked = False\nhttplib_request_kw = {'body': b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus2...alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}}\ntimeout_obj = Timeout(connect=None, read=None, total=None)\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n>               conn.request(method, url, **httplib_request_kw)\n\nvenv\\lib\\site-packages\\urllib3\\connectionpool.py:398: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nbody = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nheaders = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}\n\n    def request(self, method, url, body=None, headers=None):\n        if headers is None:\n            headers = {}\n        else:\n            # Avoid modifying the headers passed into .request()\n            headers = headers.copy()\n        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):\n            headers[\"User-Agent\"] = _get_default_user_agent()\n>       super(HTTPConnection, self).request(method, url, body=body, headers=headers)\n\nvenv\\lib\\site-packages\\urllib3\\connection.py:239: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nbody = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nheaders = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}\n\n    def request(self, method, url, body=None, headers={}, *,\n                encode_chunked=False):\n        \"\"\"Send a complete request to the server.\"\"\"\n>       self._send_request(method, url, body, headers, encode_chunked)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:1229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmethod = 'POST'\nurl = '/bot5397195536:AAHFzvc0tO_UxbsWsomlwz5z0jC5C6u440c/sendVideo?chat_id=-1001782200645&caption=%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20XiaomiSE%0A_P_TTM_v5'\nbody = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nheaders = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '1480777', 'Content-Type': 'multipart/form-data; boundary=1beb4b2a02e77b1c8745e1d1e7a8d53b'}\nencode_chunked = False\n\n    def _send_request(self, method, url, body, headers, encode_chunked):\n        # Honor explicitly requested Host: and Accept-Encoding: headers.\n        header_names = frozenset(k.lower() for k in headers)\n        skips = {}\n        if 'host' in header_names:\n            skips['skip_host'] = 1\n        if 'accept-encoding' in header_names:\n            skips['skip_accept_encoding'] = 1\n    \n        self.putrequest(method, url, **skips)\n    \n        # chunked encoding will happen if HTTP/1.1 is used and either\n        # the caller passes encode_chunked=True or the following\n        # conditions hold:\n        # 1. content-length has not been explicitly set\n        # 2. the body is a file or iterable, but not a str or bytes-like\n        # 3. Transfer-Encoding has NOT been explicitly set by the caller\n    \n        if 'content-length' not in header_names:\n            # only chunk body if not explicitly set for backwards\n            # compatibility, assuming the client code is already handling the\n            # chunking\n            if 'transfer-encoding' not in header_names:\n                # if content-length cannot be automatically determined, fall\n                # back to chunked encoding\n                encode_chunked = False\n                content_length = self._get_content_length(body, method)\n                if content_length is None:\n                    if body is not None:\n                        if self.debuglevel > 0:\n                            print('Unable to determine size of %r' % body)\n                        encode_chunked = True\n                        self.putheader('Transfer-Encoding', 'chunked')\n                else:\n                    self.putheader('Content-Length', str(content_length))\n        else:\n            encode_chunked = False\n    \n        for hdr, value in headers.items():\n            self.putheader(hdr, value)\n        if isinstance(body, str):\n            # RFC 2616 Section 3.7.1 says that text default has a\n            # default charset of iso-8859-1.\n            body = _encode(body, 'body')\n>       self.endheaders(body, encode_chunked=encode_chunked)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:1275: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmessage_body = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:1224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\nmessage_body = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n        self.send(msg)\n    \n        if message_body is not None:\n    \n            # create a consistent interface to message_body\n            if hasattr(message_body, 'read'):\n                # Let file-like take precedence over byte-like.  This\n                # is needed to allow the current position of mmap'ed\n                # files to be taken into account.\n                chunks = self._read_readable(message_body)\n            else:\n                try:\n                    # this is solely to check to see if message_body\n                    # implements the buffer API.  it /would/ be easier\n                    # to capture if PyObject_CheckBuffer was exposed\n                    # to Python.\n                    memoryview(message_body)\n                except TypeError:\n                    try:\n                        chunks = iter(message_body)\n                    except TypeError:\n                        raise TypeError(\"message_body should be a bytes-like \"\n                                        \"object or an iterable, got %r\"\n                                        % type(message_body))\n                else:\n                    # the object implements the buffer interface and\n                    # can be passed directly into socket methods\n                    chunks = (message_body,)\n    \n            for chunk in chunks:\n                if not chunk:\n                    if self.debuglevel > 0:\n                        print('Zero length chunk ignored')\n                    continue\n    \n                if encode_chunked and self._http_vsn == 11:\n                    # chunked encoding\n                    chunk = f'{len(chunk):X}\\r\\n'.encode('ascii') + chunk \\\n                        + b'\\r\\n'\n>               self.send(chunk)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:1055: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPSConnection object at 0x000001C09AEE3828>\ndata = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n                self.connect()\n            else:\n                raise NotConnected()\n    \n        if self.debuglevel > 0:\n            print(\"send:\", repr(data))\n        if hasattr(data, \"read\") :\n            if self.debuglevel > 0:\n                print(\"sendIng a read()able\")\n            encode = self._is_textIO(data)\n            if encode and self.debuglevel > 0:\n                print(\"encoding file using iso-8859-1\")\n            while 1:\n                datablock = data.read(self.blocksize)\n                if not datablock:\n                    break\n                if encode:\n                    datablock = datablock.encode(\"iso-8859-1\")\n                self.sock.sendall(datablock)\n            return\n        try:\n>           self.sock.sendall(data)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\http\\client.py:977: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET6, type=SocketKind.SOCK_STREAM, proto=0>\ndata = b'--1beb4b2a02e77b1c8745e1d1e7a8d53b\\r\\nContent-Disposition: form-data; name=\"video\"; filename=\"XiaomiSE_bus207.mp4\"\\r...0%\\xa9too\\x00\\x00\\x00\\x1ddata\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00Lavf58.29.100\\r\\n--1beb4b2a02e77b1c8745e1d1e7a8d53b--\\r\\n'\nflags = 0\n\n    def sendall(self, data, flags=0):\n        self._checkClosed()\n        if self._sslobj is not None:\n            if flags != 0:\n                raise ValueError(\n                    \"non-zero flags not allowed in calls to sendall() on %s\" %\n                    self.__class__)\n            count = 0\n            with memoryview(data) as view, view.cast(\"B\") as byte_view:\n                amount = len(byte_view)\n                while count < amount:\n>                   v = self.send(byte_view[count:])\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\ssl.py:1015: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET6, type=SocketKind.SOCK_STREAM, proto=0>\ndata = <memory at 0x000001C09AD5FF48>, flags = 0\n\n    def send(self, data, flags=0):\n        self._checkClosed()\n        if self._sslobj is not None:\n            if flags != 0:\n                raise ValueError(\n                    \"non-zero flags not allowed in calls to send() on %s\" %\n                    self.__class__)\n>           return self._sslobj.write(data)\nE           urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionAbortedError(10053, 'Программа на вашем хост-компьютере разорвала установленное подключение', None, 10053, None))\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python37\\lib\\ssl.py:984: ProtocolError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Test_MT.TestOther object at 0x000001C0A1D62630>\n\n    @allure.feature(\"Тест авторизации\")\n    @allure.story(\"Авторизация _P_TTM_v5\")\n    def test_bus207(self):\n>       assert AutoTest(number, mac, name, '_P_TTM_v5', 'bus207') == True, \"Ошибка в ходе выполнения теста bus207\"\n\nTest_MT.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTests\\Tests_frame_version.py:541: in AutoTest\n    Send_screencast(f\"screencasts/{devices_name}_{name_video}.mp4\", f'Авторизация {devices_name}\\n{ssid}')\nFunctions\\TelegramApi.py:21: in Send_screencast\n    requests.post(f'https://api.telegram.org/bot{TOKEN}/sendVideo?chat_id={chatId}&caption={text}', files=files)\nvenv\\lib\\site-packages\\requests\\api.py:117: in post\n    return request('post', url, data=data, json=json, **kwargs)\nvenv\\lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv\\lib\\site-packages\\requests\\sessions.py:529: in request\n    resp = self.send(prep, **send_kwargs)\nvenv\\lib\\site-packages\\requests\\sessions.py:645: in send\n    r = adapter.send(request, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <requests.adapters.HTTPAdapter object at 0x000001C09AEE3B00>\nrequest = <PreparedRequest [POST]>, stream = False\ntimeout = Timeout(connect=None, read=None, total=None), verify = True\ncert = None, proxies = OrderedDict()\n\n    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n    \n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n    \n        try:\n            conn = self.get_connection(request.url, proxies)\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n    \n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n    \n        chunked = not (request.body is None or 'Content-Length' in request.headers)\n    \n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError as e:\n                # this may raise a string formatting error.\n                err = (\"Invalid timeout {}. Pass a (connect, read) \"\n                       \"timeout tuple, or a single float to set \"\n                       \"both timeouts to the same value\".format(timeout))\n                raise ValueError(err)\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n    \n        try:\n            if not chunked:\n                resp = conn.urlopen(\n                    method=request.method,\n                    url=url,\n                    body=request.body,\n                    headers=request.headers,\n                    redirect=False,\n                    assert_same_host=False,\n                    preload_content=False,\n                    decode_content=False,\n                    retries=self.max_retries,\n                    timeout=timeout\n                )\n    \n            # Send the request.\n            else:\n                if hasattr(conn, 'proxy_pool'):\n                    conn = conn.proxy_pool\n    \n                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n    \n                try:\n                    skip_host = 'Host' in request.headers\n                    low_conn.putrequest(request.method,\n                                        url,\n                                        skip_accept_encoding=True,\n                                        skip_host=skip_host)\n    \n                    for header, value in request.headers.items():\n                        low_conn.putheader(header, value)\n    \n                    low_conn.endheaders()\n    \n                    for i in request.body:\n                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n                        low_conn.send(b'\\r\\n')\n                        low_conn.send(i)\n                        low_conn.send(b'\\r\\n')\n                    low_conn.send(b'0\\r\\n\\r\\n')\n    \n                    # Receive the response from the server\n                    try:\n                        # For Python 2.7, use buffering of HTTP responses\n                        r = low_conn.getresponse(buffering=True)\n                    except TypeError:\n                        # For compatibility with Python 3.3+\n                        r = low_conn.getresponse()\n    \n                    resp = HTTPResponse.from_httplib(\n                        r,\n                        pool=conn,\n                        connection=low_conn,\n                        preload_content=False,\n                        decode_content=False\n                    )\n                except:\n                    # If we hit any problems here, clean up the connection.\n                    # Then, reraise so that we can handle the actual exception.\n                    low_conn.close()\n                    raise\n    \n        except (ProtocolError, socket.error) as err:\n>           raise ConnectionError(err, request=request)\nE           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionAbortedError(10053, 'Программа на вашем хост-компьютере разорвала установленное подключение', None, 10053, None))\n\nvenv\\lib\\site-packages\\requests\\adapters.py:501: ConnectionError"}, "attachments": [{"name": "log", "source": "e8b6808c-b965-41a7-a103-febee7344099-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "bc4856e7-d4d1-4263-8546-887ad441848f-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "16e5f4ee-eeeb-4f4b-8442-1cb82a96e0b9-attachment.txt", "type": "text/plain"}], "start": 1651971554557, "stop": 1651971713053, "uuid": "db6870bd-93ec-4293-905c-a2f3a999ec41", "historyId": "3369cd05539770f0c09511c571a4094b", "testCaseId": "bc0a014b62f50edbcb39f57be6bfbe2a", "fullName": "Test_MT.TestOther#test_bus207", "labels": [{"name": "suite", "value": "Тесты основных сегментов сети МТ"}, {"name": "story", "value": "Авторизация _P_TTM_v5"}, {"name": "feature", "value": "Тест авторизации"}, {"name": "subSuite", "value": "TestOther"}, {"name": "host", "value": "tester"}, {"name": "thread", "value": "7140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_MT"}]}